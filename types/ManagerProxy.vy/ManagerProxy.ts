/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ManagerProxyInterface extends utils.Interface {
  functions: {
    "add_reward(address,address,address)": FunctionFragment;
    "set_reward_distributor(address,address,address)": FunctionFragment;
    "deploy_gauge(address)": FunctionFragment;
    "deploy_gauge(address,address)": FunctionFragment;
    "set_gauge_manager(address,address)": FunctionFragment;
    "set_manager(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "owner_proxy()": FunctionFragment;
    "gauge_manager(address)": FunctionFragment;
    "manager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add_reward"
      | "set_reward_distributor"
      | "deploy_gauge(address)"
      | "deploy_gauge(address,address)"
      | "set_gauge_manager"
      | "set_manager"
      | "factory"
      | "owner_proxy"
      | "gauge_manager"
      | "manager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add_reward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward_distributor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy_gauge(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy_gauge(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_gauge_manager",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_manager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owner_proxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_manager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;

  decodeFunctionResult(functionFragment: "add_reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_reward_distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploy_gauge(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploy_gauge(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_gauge_manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "owner_proxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;

  events: {
    "SetManager(address)": EventFragment;
    "SetGaugeManager(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGaugeManager"): EventFragment;
}

export interface SetManagerEventObject {
  _manager: string;
}
export type SetManagerEvent = TypedEvent<[string], SetManagerEventObject>;

export type SetManagerEventFilter = TypedEventFilter<SetManagerEvent>;

export interface SetGaugeManagerEventObject {
  _gauge: string;
  _gauge_manager: string;
}
export type SetGaugeManagerEvent = TypedEvent<
  [string, string],
  SetGaugeManagerEventObject
>;

export type SetGaugeManagerEventFilter = TypedEventFilter<SetGaugeManagerEvent>;

export interface ManagerProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deploy_gauge(address)"(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deploy_gauge(address,address)"(
      _pool: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_gauge_manager(
      _gauge: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_manager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    owner_proxy(overrides?: CallOverrides): Promise<[string]>;

    gauge_manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    manager(overrides?: CallOverrides): Promise<[string]>;
  };

  add_reward(
    _gauge: PromiseOrValue<string>,
    _reward_token: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _gauge: PromiseOrValue<string>,
    _reward_token: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deploy_gauge(address)"(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deploy_gauge(address,address)"(
    _pool: PromiseOrValue<string>,
    _gauge_manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_gauge_manager(
    _gauge: PromiseOrValue<string>,
    _gauge_manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_manager(
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  owner_proxy(overrides?: CallOverrides): Promise<string>;

  gauge_manager(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  manager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deploy_gauge(address)"(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "deploy_gauge(address,address)"(
      _pool: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    set_gauge_manager(
      _gauge: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_manager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    owner_proxy(overrides?: CallOverrides): Promise<string>;

    gauge_manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    manager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SetManager(address)"(
      _manager?: PromiseOrValue<string> | null
    ): SetManagerEventFilter;
    SetManager(_manager?: PromiseOrValue<string> | null): SetManagerEventFilter;

    "SetGaugeManager(address,address)"(
      _gauge?: PromiseOrValue<string> | null,
      _gauge_manager?: PromiseOrValue<string> | null
    ): SetGaugeManagerEventFilter;
    SetGaugeManager(
      _gauge?: PromiseOrValue<string> | null,
      _gauge_manager?: PromiseOrValue<string> | null
    ): SetGaugeManagerEventFilter;
  };

  estimateGas: {
    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deploy_gauge(address)"(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deploy_gauge(address,address)"(
      _pool: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_gauge_manager(
      _gauge: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_manager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    owner_proxy(overrides?: CallOverrides): Promise<BigNumber>;

    gauge_manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deploy_gauge(address)"(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deploy_gauge(address,address)"(
      _pool: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_gauge_manager(
      _gauge: PromiseOrValue<string>,
      _gauge_manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_manager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner_proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gauge_manager(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
