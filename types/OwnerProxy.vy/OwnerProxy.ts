/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface OwnerProxyInterface extends utils.Interface {
  functions: {
    "commit_set_admins(address,address,address)": FunctionFragment;
    "apply_set_admins()": FunctionFragment;
    "ramp_A(address,uint256,uint256)": FunctionFragment;
    "stop_ramp_A(address)": FunctionFragment;
    "add_base_pool(address,address,address,uint256,address[10])": FunctionFragment;
    "set_metapool_implementations(address,address,address[10])": FunctionFragment;
    "set_plain_implementations(address,uint256,address[10])": FunctionFragment;
    "set_gauge_implementation(address,address)": FunctionFragment;
    "set_fee_receiver(address,address,address)": FunctionFragment;
    "set_factory_manager(address,address)": FunctionFragment;
    "set_gauge_manager(address)": FunctionFragment;
    "commit_transfer_ownership(address,address)": FunctionFragment;
    "accept_transfer_ownership(address)": FunctionFragment;
    "set_killed(address,bool)": FunctionFragment;
    "add_reward(address,address,address)": FunctionFragment;
    "set_reward_distributor(address,address,address)": FunctionFragment;
    "ownership_admin()": FunctionFragment;
    "parameter_admin()": FunctionFragment;
    "emergency_admin()": FunctionFragment;
    "future_ownership_admin()": FunctionFragment;
    "future_parameter_admin()": FunctionFragment;
    "future_emergency_admin()": FunctionFragment;
    "gauge_manager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commit_set_admins"
      | "apply_set_admins"
      | "ramp_A"
      | "stop_ramp_A"
      | "add_base_pool"
      | "set_metapool_implementations"
      | "set_plain_implementations"
      | "set_gauge_implementation"
      | "set_fee_receiver"
      | "set_factory_manager"
      | "set_gauge_manager"
      | "commit_transfer_ownership"
      | "accept_transfer_ownership"
      | "set_killed"
      | "add_reward"
      | "set_reward_distributor"
      | "ownership_admin"
      | "parameter_admin"
      | "emergency_admin"
      | "future_ownership_admin"
      | "future_parameter_admin"
      | "future_emergency_admin"
      | "gauge_manager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commit_set_admins",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_set_admins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ramp_A",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stop_ramp_A",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_base_pool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_metapool_implementations",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_plain_implementations",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_gauge_implementation",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_fee_receiver",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_factory_manager",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_gauge_manager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "commit_transfer_ownership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accept_transfer_ownership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set_killed",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "add_reward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward_distributor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownership_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameter_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergency_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_ownership_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_parameter_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_emergency_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gauge_manager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "commit_set_admins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_set_admins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ramp_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stop_ramp_A",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_base_pool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_metapool_implementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_plain_implementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_gauge_implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_fee_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_factory_manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_gauge_manager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commit_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accept_transfer_ownership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_killed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add_reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_reward_distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownership_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parameter_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergency_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_ownership_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_parameter_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_emergency_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gauge_manager",
    data: BytesLike
  ): Result;

  events: {
    "CommitAdmins(address,address,address)": EventFragment;
    "ApplyAdmins(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommitAdmins"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApplyAdmins"): EventFragment;
}

export interface CommitAdminsEventObject {
  ownership_admin: string;
  parameter_admin: string;
  emergency_admin: string;
}
export type CommitAdminsEvent = TypedEvent<
  [string, string, string],
  CommitAdminsEventObject
>;

export type CommitAdminsEventFilter = TypedEventFilter<CommitAdminsEvent>;

export interface ApplyAdminsEventObject {
  ownership_admin: string;
  parameter_admin: string;
  emergency_admin: string;
}
export type ApplyAdminsEvent = TypedEvent<
  [string, string, string],
  ApplyAdminsEventObject
>;

export type ApplyAdminsEventFilter = TypedEventFilter<ApplyAdminsEvent>;

export interface OwnerProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OwnerProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _p_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    apply_set_admins(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ramp_A(
      _pool: PromiseOrValue<string>,
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stop_ramp_A(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_base_pool(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      _asset_type: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_metapool_implementations(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_plain_implementations(
      _target: PromiseOrValue<string>,
      _n_coins: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_gauge_implementation(
      _target: PromiseOrValue<string>,
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_fee_receiver(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_factory_manager(
      _target: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_gauge_manager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      _target: PromiseOrValue<string>,
      _new_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accept_transfer_ownership(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_killed(
      _gauge: PromiseOrValue<string>,
      _is_killed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownership_admin(overrides?: CallOverrides): Promise<[string]>;

    parameter_admin(overrides?: CallOverrides): Promise<[string]>;

    emergency_admin(overrides?: CallOverrides): Promise<[string]>;

    future_ownership_admin(overrides?: CallOverrides): Promise<[string]>;

    future_parameter_admin(overrides?: CallOverrides): Promise<[string]>;

    future_emergency_admin(overrides?: CallOverrides): Promise<[string]>;

    gauge_manager(overrides?: CallOverrides): Promise<[string]>;
  };

  commit_set_admins(
    _o_admin: PromiseOrValue<string>,
    _p_admin: PromiseOrValue<string>,
    _e_admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  apply_set_admins(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ramp_A(
    _pool: PromiseOrValue<string>,
    _future_A: PromiseOrValue<BigNumberish>,
    _future_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stop_ramp_A(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_base_pool(
    _target: PromiseOrValue<string>,
    _base_pool: PromiseOrValue<string>,
    _fee_receiver: PromiseOrValue<string>,
    _asset_type: PromiseOrValue<BigNumberish>,
    _implementations: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_metapool_implementations(
    _target: PromiseOrValue<string>,
    _base_pool: PromiseOrValue<string>,
    _implementations: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_plain_implementations(
    _target: PromiseOrValue<string>,
    _n_coins: PromiseOrValue<BigNumberish>,
    _implementations: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_gauge_implementation(
    _target: PromiseOrValue<string>,
    _gauge_implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_fee_receiver(
    _target: PromiseOrValue<string>,
    _base_pool: PromiseOrValue<string>,
    _fee_receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_factory_manager(
    _target: PromiseOrValue<string>,
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_gauge_manager(
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    _target: PromiseOrValue<string>,
    _new_admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accept_transfer_ownership(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_killed(
    _gauge: PromiseOrValue<string>,
    _is_killed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  add_reward(
    _gauge: PromiseOrValue<string>,
    _reward_token: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set_reward_distributor(
    _gauge: PromiseOrValue<string>,
    _reward_token: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownership_admin(overrides?: CallOverrides): Promise<string>;

  parameter_admin(overrides?: CallOverrides): Promise<string>;

  emergency_admin(overrides?: CallOverrides): Promise<string>;

  future_ownership_admin(overrides?: CallOverrides): Promise<string>;

  future_parameter_admin(overrides?: CallOverrides): Promise<string>;

  future_emergency_admin(overrides?: CallOverrides): Promise<string>;

  gauge_manager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _p_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    apply_set_admins(overrides?: CallOverrides): Promise<void>;

    ramp_A(
      _pool: PromiseOrValue<string>,
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stop_ramp_A(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    add_base_pool(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      _asset_type: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    set_metapool_implementations(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _implementations: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    set_plain_implementations(
      _target: PromiseOrValue<string>,
      _n_coins: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    set_gauge_implementation(
      _target: PromiseOrValue<string>,
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_fee_receiver(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_factory_manager(
      _target: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_gauge_manager(
      _manager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    commit_transfer_ownership(
      _target: PromiseOrValue<string>,
      _new_admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    accept_transfer_ownership(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_killed(
      _gauge: PromiseOrValue<string>,
      _is_killed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownership_admin(overrides?: CallOverrides): Promise<string>;

    parameter_admin(overrides?: CallOverrides): Promise<string>;

    emergency_admin(overrides?: CallOverrides): Promise<string>;

    future_ownership_admin(overrides?: CallOverrides): Promise<string>;

    future_parameter_admin(overrides?: CallOverrides): Promise<string>;

    future_emergency_admin(overrides?: CallOverrides): Promise<string>;

    gauge_manager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CommitAdmins(address,address,address)"(
      ownership_admin?: null,
      parameter_admin?: null,
      emergency_admin?: null
    ): CommitAdminsEventFilter;
    CommitAdmins(
      ownership_admin?: null,
      parameter_admin?: null,
      emergency_admin?: null
    ): CommitAdminsEventFilter;

    "ApplyAdmins(address,address,address)"(
      ownership_admin?: null,
      parameter_admin?: null,
      emergency_admin?: null
    ): ApplyAdminsEventFilter;
    ApplyAdmins(
      ownership_admin?: null,
      parameter_admin?: null,
      emergency_admin?: null
    ): ApplyAdminsEventFilter;
  };

  estimateGas: {
    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _p_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    apply_set_admins(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ramp_A(
      _pool: PromiseOrValue<string>,
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stop_ramp_A(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_base_pool(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      _asset_type: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_metapool_implementations(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_plain_implementations(
      _target: PromiseOrValue<string>,
      _n_coins: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_gauge_implementation(
      _target: PromiseOrValue<string>,
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_fee_receiver(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_factory_manager(
      _target: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_gauge_manager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      _target: PromiseOrValue<string>,
      _new_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accept_transfer_ownership(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_killed(
      _gauge: PromiseOrValue<string>,
      _is_killed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownership_admin(overrides?: CallOverrides): Promise<BigNumber>;

    parameter_admin(overrides?: CallOverrides): Promise<BigNumber>;

    emergency_admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_ownership_admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_parameter_admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_emergency_admin(overrides?: CallOverrides): Promise<BigNumber>;

    gauge_manager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _p_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    apply_set_admins(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ramp_A(
      _pool: PromiseOrValue<string>,
      _future_A: PromiseOrValue<BigNumberish>,
      _future_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stop_ramp_A(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_base_pool(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      _asset_type: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_metapool_implementations(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_plain_implementations(
      _target: PromiseOrValue<string>,
      _n_coins: PromiseOrValue<BigNumberish>,
      _implementations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_gauge_implementation(
      _target: PromiseOrValue<string>,
      _gauge_implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_fee_receiver(
      _target: PromiseOrValue<string>,
      _base_pool: PromiseOrValue<string>,
      _fee_receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_factory_manager(
      _target: PromiseOrValue<string>,
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_gauge_manager(
      _manager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      _target: PromiseOrValue<string>,
      _new_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accept_transfer_ownership(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_killed(
      _gauge: PromiseOrValue<string>,
      _is_killed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    add_reward(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set_reward_distributor(
      _gauge: PromiseOrValue<string>,
      _reward_token: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownership_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameter_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergency_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_ownership_admin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_parameter_admin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    future_emergency_admin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gauge_manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
