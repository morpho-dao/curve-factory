/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ManagerProxy,
  ManagerProxyInterface,
} from "../../ManagerProxy.vy/ManagerProxy";
import type { PromiseOrValue } from "../../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    name: "SetManager",
    inputs: [
      {
        name: "_manager",
        type: "address",
        indexed: true,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    name: "SetGaugeManager",
    inputs: [
      {
        name: "_gauge",
        type: "address",
        indexed: true,
      },
      {
        name: "_gauge_manager",
        type: "address",
        indexed: true,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_factory",
        type: "address",
      },
      {
        name: "_manager",
        type: "address",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "add_reward",
    inputs: [
      {
        name: "_gauge",
        type: "address",
      },
      {
        name: "_reward_token",
        type: "address",
      },
      {
        name: "_distributor",
        type: "address",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "set_reward_distributor",
    inputs: [
      {
        name: "_gauge",
        type: "address",
      },
      {
        name: "_reward_token",
        type: "address",
      },
      {
        name: "_distributor",
        type: "address",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "deploy_gauge",
    inputs: [
      {
        name: "_pool",
        type: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "deploy_gauge",
    inputs: [
      {
        name: "_pool",
        type: "address",
      },
      {
        name: "_gauge_manager",
        type: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "set_gauge_manager",
    inputs: [
      {
        name: "_gauge",
        type: "address",
      },
      {
        name: "_gauge_manager",
        type: "address",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "set_manager",
    inputs: [
      {
        name: "_manager",
        type: "address",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "pure",
    type: "function",
    name: "factory",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    name: "owner_proxy",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "gauge_manager",
    inputs: [
      {
        name: "arg0",
        type: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "manager",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60206105ed6000396000518060a01c6105e857604052602061060d6000396000518060a01c6105e85760605260405163000005285263f851a440608052602060806004609c6040515afa610058573d600060003e3d6000fd5b60203d106105e8576080518060a01c6105e85760c05260c0516300000548526060516001556060517f54a6385aa0292b04e1ef8513253c17d1863f7cdfc87029d77fd55cc4c2e717e260006080a26105286100bf6300000000396105286040016300000000f3600436101561000d5761051d565b60003560e01c3461052357634dca7df081186100f6576004358060a01c610523576040526024358060a01c610523576060526044358060a01c6105235760805233600060405160205260005260406000205460c05260015460e052600060a05260006002905b6020810260c00151831861008b57600160a052610096565b600101818118610073575b505060a05190501561052357634dca7df060a05260405160c05260605160e0526080516101005260206105486000396000513b156105235760006000606460bc600060206105486000396000515af16100f4573d600060003e3d6000fd5b005b63c817500481186101d4576004358060a01c610523576040526024358060a01c610523576060526044358060a01c6105235760805233600060405160205260005260406000205460c05260015460e052600060a05260006002905b6020810260c00151831861016957600160a052610174565b600101818118610151575b505060a0519050156105235763c817500460a05260405160c05260605160e0526080516101005260206105486000396000513b156105235760006000606460bc600060206105486000396000515af16101d2573d600060003e3d6000fd5b005b6396bebb3481186101e85733606052610202565b6397f9e6fe81186102a6576024358060a01c610523576060525b6004358060a01c610523576040526396bebb3460a05260405160c052602060a0602460bc600060206105286000396000515af1610244573d600060003e3d6000fd5b60203d106105235760a0518060a01c6105235760e05260e05160805260605160006080516020526000526040600020556060516080517f70d1de7e39b13d6dfb334f2447bad41ffb62bdb56a225804a8e0e2dda5c66f99600060a0a360206080f35b63c1f04f7681186103b8576004358060a01c610523576040526024358060a01c6105235760605233600154610160526347c8715f60e052602060e0600460fc60206105486000396000515afa610301573d600060003e3d6000fd5b60203d106105235760e0518060a01c6105235761012052610120516101805260016101405260006002905b602081026101600151831861034657600061014052610351565b60010181811861032c575b5050610140519050156103765760006040516020526000526040600020543318610523575b60605160006040516020526000526040600020556060516040517f70d1de7e39b13d6dfb334f2447bad41ffb62bdb56a225804a8e0e2dda5c66f9960006080a3005b639aece83e8118610493576004358060a01c6105235760405233600154610140526347c8715f60c052602060c0600460dc60206105486000396000515afa610405573d600060003e3d6000fd5b60203d106105235760c0518060a01c6105235761010052610100516101605260006101205260006002905b602081026101400151831861044a57600161012052610455565b600101818118610430575b505061012051905015610523576040516001556040517f54a6385aa0292b04e1ef8513253c17d1863f7cdfc87029d77fd55cc4c2e717e260006060a2005b63c45a015581186104b257602061052860003960005160405260206040f35b63cb023e6d81186104d157602061054860003960005160405260206040f35b630bbc36ce8118610504576004358060a01c61052357604052600060405160205260005260406000205460605260206060f35b63481c6a75811861051b5760015460405260206040f35b505b60006000fd5b600080fd005b600080fd";

type ManagerProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ManagerProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ManagerProxy__factory extends ContractFactory {
  constructor(...args: ManagerProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: PromiseOrValue<string>,
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ManagerProxy> {
    return super.deploy(
      _factory,
      _manager,
      overrides || {}
    ) as Promise<ManagerProxy>;
  }
  override getDeployTransaction(
    _factory: PromiseOrValue<string>,
    _manager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, _manager, overrides || {});
  }
  override attach(address: string): ManagerProxy {
    return super.attach(address) as ManagerProxy;
  }
  override connect(signer: Signer): ManagerProxy__factory {
    return super.connect(signer) as ManagerProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ManagerProxyInterface {
    return new utils.Interface(_abi) as ManagerProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ManagerProxy {
    return new Contract(address, _abi, signerOrProvider) as ManagerProxy;
  }
}
