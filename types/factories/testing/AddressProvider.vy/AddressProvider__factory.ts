/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type {
  AddressProvider,
  AddressProviderInterface,
} from "../../../testing/AddressProvider.vy/AddressProvider";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    name: "NewAddressIdentifier",
    inputs: [
      {
        name: "id",
        type: "uint256",
        indexed: true,
      },
      {
        name: "addr",
        type: "address",
        indexed: false,
      },
      {
        name: "description",
        type: "string",
        indexed: false,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    name: "AddressModified",
    inputs: [
      {
        name: "id",
        type: "uint256",
        indexed: true,
      },
      {
        name: "new_address",
        type: "address",
        indexed: false,
      },
      {
        name: "version",
        type: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    name: "CommitNewAdmin",
    inputs: [
      {
        name: "deadline",
        type: "uint256",
        indexed: true,
      },
      {
        name: "admin",
        type: "address",
        indexed: true,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    name: "NewAdmin",
    inputs: [
      {
        name: "admin",
        type: "address",
        indexed: true,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_admin",
        type: "address",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "get_registry",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "max_id",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "get_address",
    inputs: [
      {
        name: "_id",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "add_new_id",
    inputs: [
      {
        name: "_address",
        type: "address",
      },
      {
        name: "_description",
        type: "string",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "set_address",
    inputs: [
      {
        name: "_id",
        type: "uint256",
      },
      {
        name: "_address",
        type: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "unset_address",
    inputs: [
      {
        name: "_id",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "commit_transfer_ownership",
    inputs: [
      {
        name: "_new_admin",
        type: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "apply_transfer_ownership",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "revert_transfer_ownership",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "admin",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "transfer_ownership_deadline",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "future_admin",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "get_id_info",
    inputs: [
      {
        name: "arg0",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "addr",
        type: "address",
      },
      {
        name: "is_active",
        type: "bool",
      },
      {
        name: "version",
        type: "uint256",
      },
      {
        name: "last_modified",
        type: "uint256",
      },
      {
        name: "description",
        type: "string",
      },
    ],
  },
] as const;

const _bytecode =
  "0x602061074a61014039602061074a60c03960c05160a01c61074557610140516001556001600455600d610160527f4d61696e20526567697374727900000000000000000000000000000000000000610180526101608060046005600060e05260c052604060c02001602082510161012060006002818352015b8261012051602002111561008b576100ad565b61012051602002850151610120518501555b8151600101808352811415610078575b50505050505061072d56600436101561000d5761066a565b600035601c52600051346106705763a262904b8114156100335760005460005260206000f35b630c6d784f81141561005b576004546001808210610670578082039050905060005260206000f35b63493f4f7481141561008157600560043560e05260c052604060c0205460005260206000f35b63168f95798114156102245760043560a01c6106705760606024356004016101403760406024356004013511610670576001543314156106705760006004353b1115610670576004546101c05260056101c05160e05260c052604060c020600435815560016001820155600160028201554260038201556101408060048301602082510161012060006003818352015b8261012051602002111561012457610146565b61012051602002850151610120518501555b8151600101808352811415610111575b505050505050506101c0516001818183011061067057808201905090506004556004356102205260406101e0526101e051610240526101408051602001806101e051610220018284600060045af1156106705750506101e05161022001518060206101e051610220010101818260206001820306601f820103905003368237505060206101e051610220015160206001820306601f82010390506101e05101016101e0526101c0517f5b0f9b31dc08c19adcc0181c1b97ad54a84487faf0a4fdcb88c8681724298af96101e051610220a26101c05160005260206000f35b636a84cad081141561032f5760243560a01c610670576001543314156106705760006024353b1115610670576004356004541115610670576002600560043560e05260c052604060c020015460018181830110610670578082019050905061014052602435600560043560e05260c052604060c0205560016001600560043560e05260c052604060c0200155610140516002600560043560e05260c052604060c0200155426003600560043560e05260c052604060c02001556004356102eb576024356000555b6024356101605261014051610180526004357fe7a6334c4f573efdf292d404d59adacec345f4f7c76495a034008edda0acef476040610160a2600160005260206000f35b635eec0daa8114156103fc57600154331415610670576001600560043560e05260c052604060c0200154156106705760006001600560043560e05260c052604060c02001556000600560043560e05260c052604060c02055426003600560043560e05260c052604060c02001556004356103a95760006000555b6000610140526002600560043560e05260c052604060c0200154610160526004357fe7a6334c4f573efdf292d404d59adacec345f4f7c76495a034008edda0acef476040610140a2600160005260206000f35b636b441a408114156104815760043560a01c610670576001543314156106705760025461067057426203f480818183011061067057808201905090506101405261014051600255600435600355600435610140517f181aa3aa17d4cbf99265dd4443eba009433d3cde79d60164fde1d1a192beb93560006000a3600160005260206000f35b636a1c05ae8114156104f35760015433141561067057600060025418156106705760025442106106705760035461014052610140516001556000600255610140517f71614071b88dee5e0b2ae578a9dd7b2ebbe9ae832ba419dc0242cd065a290b6c60006000a2600160005260206000f35b6386fbf19381141561051957600154331415610670576000600255600160005260206000f35b63f851a4408114156105315760015460005260206000f35b63e0a0b5868114156105495760025460005260206000f35b6317f7182a8114156105615760035460005260206000f35b6392668ecb81141561066857600560043560e05260c052604060c0206101408060a0818085548152505060208201915081806001860154815250506020820191508180600286015481525050602082019150818060038601548152505060208201915080825280830180600486018082602082540161012060006003818352015b826101205160200211156105f557610617565b61012051850154610120516020028501525b81516001018083528114156105e2575b5050505050508051806020830101818260206001820306601f8201039050033682375050805160200160206001820306601f820103905090509050810190508090509050905060c05260c051610140f35b505b60006000fd5b600080fd5b6100b861072d036100b86000396100b861072d036000f35b600080fd";

type AddressProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressProvider__factory extends ContractFactory {
  constructor(...args: AddressProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AddressProvider> {
    return super.deploy(_admin, overrides || {}) as Promise<AddressProvider>;
  }
  override getDeployTransaction(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_admin, overrides || {});
  }
  override attach(address: string): AddressProvider {
    return super.attach(address) as AddressProvider;
  }
  override connect(signer: Signer): AddressProvider__factory {
    return super.connect(signer) as AddressProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressProviderInterface {
    return new utils.Interface(_abi) as AddressProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AddressProvider {
    return new Contract(address, _abi, signerOrProvider) as AddressProvider;
  }
}
