/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type {
  CurveTokenV3,
  CurveTokenV3Interface,
} from "../../../testing/CurveTokenV3.vy/CurveTokenV3";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    name: "Transfer",
    inputs: [
      {
        name: "_from",
        type: "address",
        indexed: true,
      },
      {
        name: "_to",
        type: "address",
        indexed: true,
      },
      {
        name: "_value",
        type: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    name: "Approval",
    inputs: [
      {
        name: "_owner",
        type: "address",
        indexed: true,
      },
      {
        name: "_spender",
        type: "address",
        indexed: true,
      },
      {
        name: "_value",
        type: "uint256",
        indexed: false,
      },
    ],
    anonymous: false,
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      {
        name: "_name",
        type: "string",
      },
      {
        name: "_symbol",
        type: "string",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "_from",
        type: "address",
      },
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "_spender",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "increaseAllowance",
    inputs: [
      {
        name: "_spender",
        type: "address",
      },
      {
        name: "_added_value",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "decreaseAllowance",
    inputs: [
      {
        name: "_spender",
        type: "address",
      },
      {
        name: "_subtracted_value",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "mint",
    inputs: [
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "burnFrom",
    inputs: [
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "set_minter",
    inputs: [
      {
        name: "_minter",
        type: "address",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    name: "set_name",
    inputs: [
      {
        name: "_name",
        type: "string",
      },
      {
        name: "_symbol",
        type: "string",
      },
    ],
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "arg0",
        type: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "arg0",
        type: "address",
      },
      {
        name: "arg1",
        type: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    name: "minter",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x60406109db61014039606060206109db60c03960c0516109db0161018039604060206109db60c03960c05160040135116109d6576040602060206109db0160c03960c0516109db01610200396020602060206109db0160c03960c05160040135116109d657610180806000602082510161012060006003818352015b8261012051602002111561008e576100b0565b61012051602002850151610120518501555b815160010180835281141561007b575b505050505050610200806004602082510161012060006002818352015b826101205160200211156100e057610102565b61012051602002850151610120518501555b81516001018083528114156100cd575b50505050505033600a553360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610260808080600081525050602090509050610260a36109be56600436101561000d57610868565b600035601c526000513461086e5763313ce56781141561003257601260005260206000f35b63a9059cbb8114156100db5760043560a01c61086e5760073360e05260c052604060c020805460243580821061086e5780820390509050815550600760043560e05260c052604060c0208054602435818183011061086e5780820190509050815550600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61014080808060243581525050602090509050610140a3600160005260206000f35b6323b872dd8114156102115760043560a01c61086e5760243560a01c61086e57600760043560e05260c052604060c020805460443580821061086e5780820390509050815550600760243560e05260c052604060c0208054604435818183011061086e5780820190509050815550600860043560e05260c052604060c0203360e05260c052604060c02054610140527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101405118156101c8576101405160443580821061086e5780820390509050600860043560e05260c052604060c0203360e05260c052604060c020555b6024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61016080808060443581525050602090509050610160a3600160005260206000f35b63095ea7b381141561028e5760043560a01c61086e5760243560083360e05260c052604060c02060043560e05260c052604060c02055600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92561014080808060243581525050602090509050610140a3600160005260206000f35b63395093518114156103415760043560a01c61086e5760083360e05260c052604060c02060043560e05260c052604060c02054602435818183011061086e5780820190509050610140526101405160083360e05260c052604060c02060043560e05260c052604060c02055600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256101608080806101405181525050602090509050610160a3600160005260206000f35b63a457c2d78114156103f25760043560a01c61086e5760083360e05260c052604060c02060043560e05260c052604060c0205460243580821061086e5780820390509050610140526101405160083360e05260c052604060c02060043560e05260c052604060c02055600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256101608080806101405181525050602090509050610160a3600160005260206000f35b6340c10f1981141561049c5760043560a01c61086e57600a5433141561086e5760098054602435818183011061086e5780820190509050815550600760043560e05260c052604060c0208054602435818183011061086e578082019050905081555060043560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61014080808060243581525050602090509050610140a3600160005260206000f35b6379cc67908114156105425760043560a01c61086e57600a5433141561086e576009805460243580821061086e5780820390509050815550600760043560e05260c052604060c020805460243580821061086e578082039050905081555060006004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61014080808060243581525050602090509050610140a3600160005260206000f35b631652e9fc81141561056a5760043560a01c61086e57600a5433141561086e57600435600a55005b63e1430e06811415610684576060600435600401610140376040600435600401351161086e5760406024356004016101c0376020602435600401351161086e573360206102806004638da5cb5b6102205261023c600a545afa1561086e57601f3d111561086e5760005061028051141561086e57610140806000602082510161012060006003818352015b826101205160200211156106085761062a565b61012051602002850151610120518501555b81516001018083528114156105f5575b5050505050506101c0806004602082510161012060006002818352015b8261012051602002111561065a5761067c565b61012051602002850151610120518501555b8151600101808352811415610647575b505050505050005b6306fdde0381141561072157600080610180602082540161012060006003818352015b826101205160200211156106ba576106dc565b61012051850154610120516020028501525b81516001018083528114156106a7575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b6395d89b418114156107be57600480610180602082540161012060006002818352015b8261012051602002111561075757610779565b61012051850154610120516020028501525b8151600101808352811415610744575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b6370a082318114156107ee5760043560a01c61086e57600760043560e05260c052604060c0205460005260206000f35b63dd62ed3e8114156108365760043560a01c61086e5760243560a01c61086e57600860043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f35b6318160ddd81141561084e5760095460005260206000f35b630754617281141561086657600a5460005260206000f35b505b60006000fd5b600080fd5b61014b6109be0361014b60003961014b6109be036000f35b600080fd";

type CurveTokenV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveTokenV3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveTokenV3__factory extends ContractFactory {
  constructor(...args: CurveTokenV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveTokenV3> {
    return super.deploy(
      _name,
      _symbol,
      overrides || {}
    ) as Promise<CurveTokenV3>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  override attach(address: string): CurveTokenV3 {
    return super.attach(address) as CurveTokenV3;
  }
  override connect(signer: Signer): CurveTokenV3__factory {
    return super.connect(signer) as CurveTokenV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveTokenV3Interface {
    return new utils.Interface(_abi) as CurveTokenV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveTokenV3 {
    return new Contract(address, _abi, signerOrProvider) as CurveTokenV3;
  }
}
