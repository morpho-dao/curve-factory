/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "FactorySidechains",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactorySidechains__factory>;
    getContractFactory(
      name: "LiquidityGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityGauge__factory>;
    getContractFactory(
      name: "ManagerProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerProxy__factory>;
    getContractFactory(
      name: "OwnerProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerProxy__factory>;
    getContractFactory(
      name: "PoolMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolMigrator__factory>;
    getContractFactory(
      name: "AaveLendingPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveLendingPoolMock__factory>;
    getContractFactory(
      name: "AToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AToken__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AddressProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressProvider__factory>;
    getContractFactory(
      name: "ATokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokenMock__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "CurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurvePool__factory>;
    getContractFactory(
      name: "CurveTokenV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveTokenV3__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "MockBoostDelegationProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBoostDelegationProxy__factory>;
    getContractFactory(
      name: "Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registry__factory>;
    getContractFactory(
      name: "DepositZapBTC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositZapBTC__factory>;
    getContractFactory(
      name: "DepositZapMorphoAaveV2USD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositZapMorphoAaveV2USD__factory>;
    getContractFactory(
      name: "DepositZapUSD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositZapUSD__factory>;

    getContractAt(
      name: "Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "FactorySidechains",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactorySidechains>;
    getContractAt(
      name: "LiquidityGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityGauge>;
    getContractAt(
      name: "ManagerProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerProxy>;
    getContractAt(
      name: "OwnerProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerProxy>;
    getContractAt(
      name: "PoolMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolMigrator>;
    getContractAt(
      name: "AaveLendingPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveLendingPoolMock>;
    getContractAt(
      name: "AToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AToken>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AddressProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressProvider>;
    getContractAt(
      name: "ATokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokenMock>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "CurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurvePool>;
    getContractAt(
      name: "CurveTokenV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveTokenV3>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "MockBoostDelegationProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBoostDelegationProxy>;
    getContractAt(
      name: "Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Registry>;
    getContractAt(
      name: "DepositZapBTC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositZapBTC>;
    getContractAt(
      name: "DepositZapMorphoAaveV2USD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositZapMorphoAaveV2USD>;
    getContractAt(
      name: "DepositZapUSD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositZapUSD>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
